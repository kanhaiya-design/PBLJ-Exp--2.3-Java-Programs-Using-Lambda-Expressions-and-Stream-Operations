import java.util.*;
import java.util.stream.*;

class Employee {
    String name;
    int age;
    double salary;

    Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return name + " | Age: " + age + " | Salary: " + salary;
    }
}

class Student {
    String name;
    double marks;

    Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }

    @Override
    public String toString() {
        return name + " (" + marks + ")";
    }
}

class Product {
    String name;
    double price;
    String category;

    Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    @Override
    public String toString() {
        return name + " | " + category + " | " + price;
    }
}

public class LambdaStreamDemo {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while(true) {
            System.out.println("\nSelect Task:");
            System.out.println("1. Employee Sorting");
            System.out.println("2. Student Filter & Sort");
            System.out.println("3. Product Stream Operations");
            System.out.println("4. Exit");
            int choice = sc.nextInt();

            switch(choice) {
                case 1: employeeSorting(); break;
                case 2: studentFilterSort(); break;
                case 3: productStreamOps(); break;
                case 4: System.exit(0);
                default: System.out.println("Invalid choice");
            }
        }
    }

    static void employeeSorting() {
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("Alice", 30, 50000));
        employees.add(new Employee("Bob", 25, 60000));
        employees.add(new Employee("Charlie", 28, 55000));

        employees.sort((e1, e2) -> e1.name.compareTo(e2.name));
        System.out.println("Sorted by name: " + employees);

        employees.sort((e1, e2) -> Integer.compare(e1.age, e2.age));
        System.out.println("Sorted by age: " + employees);

        employees.sort((e1, e2) -> Double.compare(e2.salary, e1.salary));
        System.out.println("Sorted by salary (desc): " + employees);
    }

    static void studentFilterSort() {
        List<Student> students = Arrays.asList(
                new Student("Alice", 80),
                new Student("Bob", 70),
                new Student("Charlie", 90),
                new Student("David", 60)
        );

        System.out.println("Students with marks > 75 sorted by marks:");
        students.stream()
                .filter(s -> s.marks > 75)
                .sorted(Comparator.comparingDouble(s -> s.marks))
                .map(s -> s.name)
                .forEach(System.out::println);
    }

    static void productStreamOps() {
        List<Product> products = Arrays.asList(
                new Product("Laptop", 70000, "Electronics"),
                new Product("Smartphone", 50000, "Electronics"),
                new Product("Jeans", 2000, "Clothing"),
                new Product("Shirt", 1500, "Clothing"),
                new Product("Watch", 10000, "Accessories")
        );

        Map<String, List<Product>> grouped = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));
        System.out.println("Grouped by category: " + grouped);

        Map<String, Optional<Product>> maxPriceByCategory = products.stream()
                .collect(Collectors.groupingBy(
                        p -> p.category,
                        Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
                ));
        System.out.println("Most expensive in each category: " + maxPriceByCategory);

        double avgPrice = products.stream()
                .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("Average price of all products: " + avgPrice);
    }
}
